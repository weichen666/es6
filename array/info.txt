1. Array.from()

	将两类对象转为真正的数组:
		1> 类数组对象（array-like-object）
		2> 可遍历对象（iterable）

	第一个参数：待转换的对象
	第二个参数： 每个参数执行的方法，如果存在的话，就返回这个值
	第三个参数： 用来绑定第二个参数使用的this值

	用途(可以正确处理unicode字符串)
		Array.from(string).length

2. Array.of()
	将一组值，转换为数组
	目的:
		弥补数组构造函数Array() 的不足。
		Array() // []
		Array(3) // [, , ,]
		Array(3, 11, 8) // [3, 11, 8]

3. 数组实例的copyWithin()
	在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），
	然后返回当前数组，这个函数会修改当前数组。

	Array.prototype.copyWithin(target, start = 0, end = this.length)
	target（必需）：从该位置开始替换数据。
	start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
	end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
		[1, 2, 3, 4, 5].copyWithin(0, 3)
		// [4, 5, 3, 4, 5]

4. 数组实例的find() 和 findIndex()
	用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。

	数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。

	这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。

	另外，这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足。

	[NaN].indexOf(NaN) // -1

	[NaN].findIndex(y => Object.is(NaN, y)) // 0

5. 数组实例的fill()
	fill方法使用给定值，填充一个数组。
	['a', 'b', 'c'].fill(7) //777
	new Array(3).fill(7)    //777
