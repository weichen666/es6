
基本用法（在js中Set是有顺序的，所有可以直接遍历）
	Set 类似于数组，成员的值都是唯一的，没有重复的值。
	Set 本身是一个构造函数，用来生成 Set 数据结构。
	代码: set_first.html
		上面代码通过add方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。


	Set 函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。
	代码：set_init.html
		向Set加入值的时候，不会发生类型转换，"5" 和 5是两个不同的值/
		Set内部判断两个值是否不同，使用的算法叫做“Same-value equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。

		let set = new Set();
		let a = NaN;
		let b = NaN;
		set.add(a);
		set.add(b);
		set// Set(NaN)

		两个对象总是不相等的(和 Python不一样)
		let set = new Set();
		set.add({});
		set.add({});
		set.size	//2

Set实例的属性和方法
	Set.prototype.constructor:构造函数，默认就是Set函数
	Set.prototype.size: 返回Set实例的成员总数

Set实例的方法分为两大类：
	操作方法(用于操作数据)
	遍历方法(遍历成员)


	操作方法：
		代码: set_method.html
		-add(value)：添加某个值，返回Set结构本身。
		-delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
		-has(value)：返回一个布尔值，表示该值是否为Set的成员
		-clear()：清除所有成员，没有返回值。

	遍历操作:
		-keys()：返回键名的遍历器
		-values()：返回键值的遍历器
		-entries()：返回键值对的遍历器
		-forEach()：使用回调函数遍历每个成员

	代码: set_iter.html


2. WeakSet
	WeakSet结构和Set结构类似，也是不重复的值的集合。
	但与Set有两个区别。
		首先，WeakSet的成员只能是对象，不能是其他类型的值
		其次，WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet该对象的引用，
	也就说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，
	不考虑该对象还存在于WeakSet之中。
		这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的。

	代码： set_weakset.html

	WeakSet结构有以下三个方法：
		-WeakSet.prototype.add(value):向WeakSet实际添加一个新成员。
		-WeakSet.prototype.delete(value):清除WeakSet实例的指定成员。
		-WeakSet.prototype.has(value):返回一个布尔值，表示某一个值是否存在

	代码： set_weakset_method.html


	作用：
		WeakSet的一个用处，是储存DOM节点，而不用担心这些节点从文档中移除，引发内存泄漏。

	const foos = new WeakSet()
	class Foo{
		constructor(){
			foos.add(this)
		}

		method(){
			if(!foos.has(this)){
				throw new TypeError("Foo.prototype.method 只能在Foo的实例上调用!");
			}
		}
	}

	上面代码保证了Foo的实例方法，只能在Foo的实例上调用。
	这里使用WeakSet的好处时，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存溢出。
















